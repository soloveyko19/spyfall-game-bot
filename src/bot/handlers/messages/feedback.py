from database.models import User, Feedback
from keyboards.inline import (
    back_to_admin_menu_keyboard,
    back_to_menu_keyboard,
    confirm_keyboard,
)
from utils.messages import escape_markdown_v2
from utils.states import FeedbackStates

from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _


router = Router()


@router.message(StateFilter(FeedbackStates.feedback))
async def message_feedback(
    message: types.Message, state: FSMContext, db_user: User
):
    feedback = Feedback(user_id=db_user.id, message=message.text)
    await feedback.save()
    await state.clear()
    await message.answer(
        text=_(
            "*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±—ç–∫\\! ‚ù§Ô∏è*\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {feedback_id}\n\n_–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\\!_",
        ).format(feedback_id=feedback.id),
        reply_markup=back_to_menu_keyboard(),
    )


@router.message(StateFilter(FeedbackStates.feedback_number))
async def message_feedback_number(message: types.Message, state: FSMContext):
    try:
        feedback_id = int(message.text)
    except (ValueError, TypeError):
        return await message.answer(
            text=_(
                "*–ü–æ–∂–∞–ª—É—Å—Ç–∞\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–¥–±—ç–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å*"
            ),
            reply_markup=back_to_admin_menu_keyboard(),
        )
    feedback = await Feedback.get(feedback_id)
    if not feedback:
        return await message.answer(
            text=_(
                "*–§–∏–¥–±—ç–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\\! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä\\, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\.*"
            ),
            reply_markup=back_to_admin_menu_keyboard(),
        )
    await state.update_data({"feedback_id": feedback_id})
    await state.set_state(FeedbackStates.answer)
    await message.answer(
        text=_(
            "*–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–∏–¥–±—ç–∫:*\n\n[{user_full_name}](tg://user?id={user_tg_id}): {message}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∏–¥–±—ç–∫ üëá"
        ).format(
            user_full_name=escape_markdown_v2(feedback.user.full_name),
            user_tg_id=feedback.user.tg_id,
            message=escape_markdown_v2(feedback.message),
        )
    )


@router.message(StateFilter(FeedbackStates.answer))
async def message_answer_feedback(message: types.Message, state: FSMContext):
    await state.update_data({"answer": message.text})
    await state.set_state(FeedbackStates.confirm_answer)
    await message.answer(
        text=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ–∏–¥–±—ç–∫"),
        reply_markup=confirm_keyboard(),
    )
