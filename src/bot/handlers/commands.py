from keyboards.inline import (
    join_game_keyboard,
    link_to_bot_keyboard,
    vote_players_keyboard,
    location_options_keyboard,
)
from database.models import User, Game, Player, Vote
from utils.messages import (
    update_message,
    join_message,
    send_message,
    delete_all_messages,
    discussion_message,
)
from states.state import LocationStates
from filters.chat import ChatTypeFilter

import asyncio
import random

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

router = Router()


@router.message(Command("start"), ChatTypeFilter("private"))
async def command_start(message: types.Message):
    user = await User.get_or_create(
        tg_id=message.from_user.id, full_name=message.from_user.full_name
    )
    try:
        join_key = message.text.split()[1]
    except IndexError:
        await message.answer(
            text="*–ü—Ä–∏–≤–µ—Ç\\!* üëã\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –≥–¥–µ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å\\!",
            parse_mode="MarkdownV2",
        )
        return
    game = await Game.get(join_key=join_key)
    try:
        if not game:
            return await message.reply(
                text="*–û—à–∏–±–∫–∞ ‚ùóÔ∏è*\n_–¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\\._",
                parse_mode="MarkdownV2",
            )
        elif game.state_id != 2:
            await message.reply(
                text="*–û—à–∏–±–∫–∞ ‚ùóÔ∏è*\n–ù–∞–±–æ—Ä –≤ –∏–≥—Ä—É —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω\\!",
                parse_mode="MarkdownV2",
            )
    except AttributeError:
        return await message.answer(text="*–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\\!*")
    try:
        await Player.join_to_game(game_id=game.id, user_id=user.id)
    except ValueError:
        await message.answer(
            text="*–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ\\!* ‚õîÔ∏è", parse_mode="MarkdownV2"
        )
        return
    await game.refresh()
    await update_message(
        message_id=game.join_message_tg_id,
        message_chat_id=game.group_tg_id,
        new_message=join_message(seconds=90, players=game.players),
        reply_markup=join_game_keyboard(join_key=game.join_key),
    )
    await message.answer(
        text="*–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ –®–ø–∏–æ–Ω–∞\\! ‚úÖ*",
        parse_mode="MarkdownV2",
    )


@router.message(Command("start"), ChatTypeFilter("supergroup", "group"))
async def command_start_group(message: types):
    await message.delete()
    await message.answer(
        text="*–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /game*",
        parse_mode="MarkdownV2",
    )


@router.message(Command("game"), ChatTypeFilter("supergroup", "group"))
async def command_game(message: types.Message):
    await message.delete()
    game = await Game.get(group_tg_id=message.chat.id)
    if not game:
        game = Game(group_tg_id=message.chat.id, state_id=1)
        await game.save()
    elif game.state_id != 1:
        await message.answer(
            text="*–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞\\!* ‚õîÔ∏è", parse_mode="MarkdownV2"
        )
        return
    async with game:
        # TESTING FEATURES
        # nikita = await Player(game_id=game.id, user_id=1).save()
        # skuba = await Player(game_id=game.id, user_id=5).save()
        # await game.refresh()

        reg_messages = [
            await message.answer(
                text=join_message(seconds=90, players=game.players),
                reply_markup=join_game_keyboard(join_key=game.join_key),
                parse_mode="MarkdownV2",
            )
        ]
        game.join_message_tg_id = reg_messages[0].message_id
        await game.save()
        for sec in range(89, 0, -1):
            await asyncio.gather(asyncio.sleep(1), game.refresh())
            if game.state_id == 1:
                await delete_all_messages(reg_messages)
                return
            elif game.state_id == 3:
                break
            elif sec % 30 == 0:
                reg_messages.append(
                    await message.answer(
                        text=join_message(seconds=sec),
                        reply_markup=join_game_keyboard(
                            join_key=game.join_key
                        ),
                        parse_mode="MarkdownV2",
                    )
                )
        await asyncio.gather(delete_all_messages(reg_messages), game.refresh())
        if len(game.players) < 4:
            await message.answer(
                text="*–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞\\! ‚ùå*\n_–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã\\._",
                parse_mode="MarkdownV2",
            )
            return
        elif len(game.players) > 10:
            await message.answer(
                text="*–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞\\! ‚ùå*\n_–ú–∞–∫—Å–∏–º—É–º 10 –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ\\._",
                parse_mode="MarkdownV2",
            )
            return
        spies_count = 1
        game.state_id = 3
        await game.save()
        await message.answer(
            text=discussion_message(game.players),
            reply_markup=link_to_bot_keyboard(),
            parse_mode="MarkdownV2",
        )
        spies = random.sample(population=game.players, k=spies_count)
        tasks = []
        for player in game.players:
            if player in spies:
                player.role_id = 1
                tasks.extend(
                    [
                        send_message(
                            chat_id=player.user.tg_id,
                            text="*–í—ã –®–ø–∏–æ–Ω\\! ü¶∏*\n_–ù–µ –¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤—ã—á–∏—Å–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å\\!_",
                            parse_mode="MarkdownV2",
                        ),
                        player.save(),
                    ]
                )
                real_spy = player
            else:
                player.role_id = 2
                tasks.append(
                    send_message(
                        chat_id=player.user.tg_id,
                        text=f"*–í—ã –ù–ï –®–ø–∏–æ–Ω! üë®*\n–õ–æ–∫–∞—Ü–∏—è: *{game.location.name.capitalize()}*\n_–í—ã—á–∏—Å–ª–∏—Ç–µ —à–ø–∏–æ–Ω–∞!_",
                        parse_mode="Markdown",
                    )
                )
            await player.save()
        await asyncio.gather(*tasks)
        for sec in range(len(game.players) * 60, 0, -1):
            await asyncio.gather(game.refresh(), asyncio.sleep(1))
            if game.state_id == 1:
                return
            elif game.state_id == 4:
                break
            elif sec == 60:
                await message.answer(
                    text="*–û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\\! ‚è≥*",
                    parse_mode="MarkdownV2",
                )
        await message.answer(
            text="*–í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤—ã—à–ª–æ\\! ‚åõÔ∏è*\n–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–µ–º –∑–∞ —à–ø–∏–æ–Ω–∞\\!",
            reply_markup=link_to_bot_keyboard(),
            parse_mode="MarkdownV2",
        )
        game.state_id = 4
        await game.save()

        # TESTING FEATURES
        # vote = Vote(
        #     player_id=skuba.id,
        #     spy_id=nikita.id
        # )
        # await vote.save()

        await asyncio.gather(
            *[
                send_message(
                    chat_id=player.user.tg_id,
                    text="*–ö—Ç–æ —à–ø–∏–æ–Ω? ü¶∏*",
                    reply_markup=vote_players_keyboard(
                        players=[
                            _player for _player in game.players if _player != player
                        ]
                    ),
                    parse_mode="MarkdownV2",
                )
                for player in game.players
            ]
        )
        for sec in range(60, 0, -1):
            await asyncio.gather(asyncio.sleep(1), game.refresh(attrs=["state_id"]))
            if game.state_id == 1:
                return
            elif await game.all_players_voted():
                break

        max_player_voted = 0
        spy_player = None
        for player in await game.get_players():
            if len(player.spy_voted) > max_player_voted:
                spy_player = player
                max_player_voted = len(player.spy_voted)
            elif len(player.spy_voted) == max_player_voted:
                spy_player = None

        if not spy_player:
            await message.answer(
                text=f"*–ú–Ω–µ–Ω–∏—è —Ä–∞–∑–æ—à–ª–∏—Å—å\\, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ–±–µ–¥–∞ –®–ø–∏–æ–Ω–∞\\! üíÅ‚Äç‚ôÇÔ∏è*\n–®–ø–∏–æ–Ω–æ–º –±—ã–ª\\(\\-a\\) [{real_spy.user.full_name}](tg://user?id={real_spy.user.tg_id})",
                parse_mode="MarkdownV2",
            )
            return

        await message.answer(
            text=f"*–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∑–∞* [{spy_player.user.full_name}](tg://user?id={spy_player.user.tg_id})",
            parse_mode="MarkdownV2",
        )

        await asyncio.sleep(5)
        if real_spy.id == spy_player.id:
            res_msg = (
                "*–ü–æ–±–µ–¥–∞ –º–∏—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\\!*\n_–õ–∏—á–Ω–æ—Å—Ç—å —à–ø–∏–æ–Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞\\!_"
            )
        else:
            res_msg = f"*–ü–æ–±–µ–¥–∞ –®–ø–∏–æ–Ω–∞\\!*\n_–ï–≥–æ –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞\\!_\n–®–ø–∏–æ–Ω–æ–º –±—ã–ª\\(\\-a\\) [{real_spy.user.full_name}](tg://user?id={real_spy.user.tg_id})"
        await message.answer(text=res_msg, parse_mode="MarkdownV2")


@router.message(Command("location"), ChatTypeFilter("private"))
async def command_location(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        text="*–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*",
        reply_markup=location_options_keyboard(),
        parse_mode="MarkdownV2",
    )
    await state.set_state(LocationStates.option)


@router.message(Command("skip"), ChatTypeFilter("supergroup", "group"))
async def command_skip(message: types.Message):
    await message.delete()
    game = await Game.get(group_tg_id=message.chat.id)
    if game and game.state_id in (2, 3):
        game.state_id += 1
        await game.save()


@router.message(Command("stop"), ChatTypeFilter("supergroup", "group"))
async def command_stop(message: types.Message):
    await message.delete()
    game = await Game.get(group_tg_id=message.chat.id)
    if game and game.state_id != 1:
        game.state_id = 1
        await game.save()
        await message.answer(
            text="*–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\\. ‚ùå*", parse_mode="MarkdownV2"
        )


@router.message(Command("cancel"), ChatTypeFilter("private"))
async def command_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.delete()
    await message.answer(
        text="*–û—Ç–º–µ–Ω–∞\\! ‚ùå*\n–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–Ω—è—Ç—ã\\!", parse_mode="MarkdownV2"
    )


@router.message(Command("help"))
async def command_help(message: types):
    await message.answer(
        text="*–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∫–µ—Ç –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —à–ø–∏–æ–Ω–∞\\! üëã*\n\n*–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã —Å–ª–µ–¥—É—é—â–∏–µ:*\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å\\, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /game –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –≥—Ä—É–ø–ø–µ –≥–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏–≥—Ä–∞\\. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª\\-–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∏–≥—Ä—ã \\- 4\\, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 10\\.\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤\\, –±–æ—Ç –≤—ã—à–ª–µ—Ç –≤–∞–º –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–∞–¥–µ—Ç –≤–∞–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º\\. –í –∏–≥—Ä–µ –µ—Å—Ç—å –¥–≤–µ —Ä–æ–ª–∏:\n*–®–ø–∏–æ–Ω* \\- –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –≤—ã–¥–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã\\.\n*–ù–µ –®–ø–∏–æ–Ω* \\- –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å —à–ø–∏–æ–Ω–∞\\.\n\n–ï—Å–ª–∏ –≤–∞—à–∞ —Ä–æ–ª—å \\- \"–ù–µ –®–ø–∏–æ–Ω\"\\, —Ç–æ –≤–∞–º —Ç–∞–∫–∂–µ –±–æ—Ç –≤—ã–¥–∞—Å—Ç —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã\\. –ó–∞–¥–∞—á–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∏–≥—Ä—ã \\- –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏\\, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å —à–ø–∏–æ–Ω–∞\\. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\\, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —à–ø–∏–æ–Ω–∞\\. –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±–∏—Ä–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\\, —Ç–æ –®–ø–∏–æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç\\. –ï—Å–ª–∏ –∂–µ —à–ø–∏–æ–Ω–∞ –≤—ã—á–∏—Å–ª–∏–ª–∏\\, –∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∑–∞ –Ω–µ–≥–æ\\, —Ç–æ —É –Ω–µ–≥–æ –µ—â–µ –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç—å\\, –Ω–∞–∑–≤–∞–≤ —Å–ª–æ–≤–æ –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –ø–æ–Ω—è–ª –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –≤–æ–ø—Ä–æ—Å–æ–≤\\.\n*–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã\\!*",
        parse_mode="MarkdownV2"
    )
