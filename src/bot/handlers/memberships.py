from aiogram import Router, types
from aiogram.filters import (
    ChatMemberUpdatedFilter,
    JOIN_TRANSITION,
    LEAVE_TRANSITION,
    MEMBER,
    ADMINISTRATOR,
)

from database.models import Game

router = Router()


@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def bot_joined(message: types.ChatMemberUpdated):
    if message.new_chat_member.user.id == message.bot.id:
        game = await Game.get(group_tg_id=message.chat.id)
        if not game:
            game = Game(group_tg_id=message.chat.id, state_id=1)
        else:
            game.is_allowed = False
        await game.save()
        await message.answer(
            text="*–ü—Ä–∏–≤–µ—Ç\\! üëã*\n*–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\\- –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\\- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\\- –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode="MarkdownV2",
        )


@router.my_chat_member(
    ChatMemberUpdatedFilter((MEMBER | ADMINISTRATOR) >> ADMINISTRATOR)
)
async def check_promoted(message: types.ChatMemberUpdated):
    if message.new_chat_member.user.id == message.bot.id:
        game = await Game.get(group_tg_id=message.chat.id)
        rights = [
            message.new_chat_member.can_delete_messages,
            message.new_chat_member.can_restrict_members,
            message.new_chat_member.can_pin_messages,
        ]
        if all(rights):
            game.is_allowed = True
            await game.save()
            await message.answer(
                text="*–û—Ç–ª–∏—á–Ω–æ\\! ‚úÖ\n–í—Å–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã\\!* üòé\n–ú–æ–∂–µ–º –Ω–∞—á–Ω–∞—Ç—å –∏–≥—Ä—É /game",
                parse_mode="MarkdownV2",
            )
        else:
            if game.state_id != 1:
                game.state_id = 1
            game.is_allowed = False
            await game.save()
            await message.answer(
                text=f"*–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\:*\n{'‚úÖ' if rights[0] else '‚ùå'} \\- –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n{'‚úÖ' if rights[1] else '‚ùå'} \\- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n{'‚úÖ' if rights[2] else '‚ùå'} \\- –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                parse_mode="MarkdownV2",
            )


@router.my_chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def bot_leaved(message: types.ChatMemberUpdated):
    if message.new_chat_member.user.id != message.bot.id:
        return
    game = await Game.get(group_tg_id=message.chat.id)
    if not game:
        return
    elif game.state_id != 1:
        game.state_id = 1
    game.is_allowed = False
    await game.save()
