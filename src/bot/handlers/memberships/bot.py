from aiogram.enums import ChatMemberStatus

from database.models import Game
from utils.messages import LANGUAGES

from aiogram import Router, types
from aiogram.filters import (
    ChatMemberUpdatedFilter,
    JOIN_TRANSITION,
    LEAVE_TRANSITION,
    MEMBER,
    ADMINISTRATOR,
    RESTRICTED
)
from aiogram.utils.i18n import gettext as _


router = Router()


@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def bot_joined(message: types.ChatMemberUpdated, game: Game):
    if message.new_chat_member.user.id == message.bot.id:
        if not game:
            locale = message.from_user.language_code
            game = Game(
                group_tg_id=message.chat.id,
                state_id=1,
                locale=locale if locale in LANGUAGES.keys() else "en"
            )
        else:
            game.is_allowed = False
        await game.save()
        await message.answer(
            text=_(
                "*–ü—Ä–∏–≤–µ—Ç\\! üëã*\n*–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\\- –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\\- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\\- –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                locale=game.locale
            )
        )


@router.my_chat_member(
    ChatMemberUpdatedFilter((MEMBER | ADMINISTRATOR | RESTRICTED) >> (MEMBER | ADMINISTRATOR | RESTRICTED))
)
async def check_promoted(message: types.ChatMemberUpdated, game: Game):
    if message.new_chat_member.user.id == message.bot.id:
        bot_member = message.new_chat_member
        if bot_member.status == ChatMemberStatus.RESTRICTED:
            if bot_member.can_send_messages:
                await message.answer(
                    _("*–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞\\!*\n_–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_")
                )
            if game:
                game.state_id = 1
                game.is_allowed = False
                await game.save()
            return
        rights = [
            message.new_chat_member.can_delete_messages,
            message.new_chat_member.can_restrict_members,
            message.new_chat_member.can_pin_messages
        ]
        if all(rights):
            game.is_allowed = True
            await game.save()
            await message.answer(
                text=_(
                    "*–û—Ç–ª–∏—á–Ω–æ\\! ‚úÖ\n–í—Å–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã\\!* üòé\n–ú–æ–∂–µ–º –Ω–∞—á–Ω–∞—Ç—å –∏–≥—Ä—É /game"
                )
            )
        else:
            game.state_id = 1
            game.is_allowed = False
            await game.save()
            await message.answer(
                text=_(
                    "*–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\:*\n{rule_1} \\- –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n{rule_2} \\- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n{rule_3} \\- –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
                ).format(
                    rule_1="‚úÖ" if rights[0] else "‚ùå",
                    rule_2="‚úÖ" if rights[1] else "‚ùå",
                    rule_3="‚úÖ" if rights[2] else "‚ùå",
                )
            )


@router.my_chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def bot_leaved(message: types.ChatMemberUpdated, game: Game):
    if message.new_chat_member.user.id != message.bot.id or not game:
        return
    game.state_id = 1
    game.is_allowed = False
    await game.save()
