from aiogram.types import (
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from utils.states import (
    LocationStates,
    FeedbackStates,
    AdminStates,
    MailingStates,
)
from database.models import Location, User, Feedback
from keyboards.inline import (
    cancel_keyboard,
    add_buttons_to_mailing_keyboard,
    confirm_mailing_keyboard,
)
from utils.messages import escape_markdown_v2
from utils.commands import set_admin_commands

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.utils.i18n import gettext as _

router = Router()


@router.message(StateFilter(LocationStates.location))
async def message_location(message: types.Message):
    locations_deserialized = message.text.lower().split(", ")
    locations = [
        Location(name=" ".join(location.split()))
        for location in locations_deserialized
    ]
    await Location.add_many(locations)
    msg = _("*–õ–æ–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:*\n\n")
    for location in locations:
        msg += f"{escape_markdown_v2(location.name)}\n"
    msg += _("\n\n*–î–æ–±–∞–≤–∏–º –µ—â–µ\\?*")
    await message.answer(
        text=msg,
        reply_markup=cancel_keyboard(),
    )


@router.message(StateFilter(FeedbackStates.feedback))
async def message_feedback(
    message: types.Message, state: FSMContext, db_user: User
):
    feedback = Feedback(user_id=db_user.id, message=message.text)
    await feedback.save()
    await state.clear()
    await message.answer(
        text=_(
            "*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±—ç–∫\\! ‚ù§Ô∏è*\n_–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\\!_"
        )
    )


@router.message(StateFilter(AdminStates.message_user))
async def message_admin_user(
    message: types.Message, state: FSMContext, db_user: User
):
    if message.text == _("–û—Ç–º–µ–Ω–∏—Ç—å! ‚ùå"):
        await state.clear()
        await message.answer(
            text=_("–û—Ç–º–µ–Ω–µ–Ω–æ\\!"), reply_markup=ReplyKeyboardRemove()
        )
        return
    elif message.user_shared:
        if db_user:
            db_user.is_admin = True
            await db_user.save()
            await message.answer(
                text=_(
                    "*–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ [{name}](tg://user?id={tg_id}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\!*"
                ).format(
                    name=escape_markdown_v2(db_user.full_name),
                    tg_id=db_user.tg_id,
                ),
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
            await message.bot.send_message(
                chat_id=db_user.tg_id,
                text=_(
                    "*[{name}](tg://user?id={tg_id}) –Ω–∞–∑–Ω–∞—á–∏–ª –í–∞—Å –º–æ–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\!*"
                ).format(
                    name=escape_markdown_v2(message.from_user.full_name),
                    tg_id=message.from_user.id,
                ),
            )
            await set_admin_commands(bot=message.bot, user=db_user)
        else:
            await message.answer(
                text=_(
                    "*–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ\\!*\n_–°–ø–µ—Ä–≤–∞ –µ–º—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start\\._"
                ),
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
    else:
        await message.answer(
            text=_(
                "*–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\\(*_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üëá_"
            )
        )


@router.message(StateFilter(MailingStates.message))
async def message_mailing_message(message: types.Message, state: FSMContext):
    await state.update_data(
        message_id=message.message_id, chat_id=message.chat.id
    )
    await message.answer(
        text=_("*–ü—Ä–∏–Ω—è—Ç–æ\\!*\n–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?"),
        reply_markup=add_buttons_to_mailing_keyboard(),
    )
    await state.set_state(MailingStates.button)


@router.message(StateFilter(MailingStates.button_text))
async def message_mailing_button_url(
    message: types.Message, state: FSMContext
):
    await state.update_data(button_text=message.text)
    await message.answer(
        text=_("*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–Ω–æ–ø–∫—É\\.*"),
        reply_markup=cancel_keyboard(),
    )
    await state.set_state(MailingStates.button_url)


@router.message(StateFilter(MailingStates.button_url))
async def message_mailing_button_text(
    message: types.Message, state: FSMContext
):
    if not message.text.startswith(
        "https://"
    ) and not message.text.startswith("http://"):
        return await message.answer(
            text=_("*–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\\, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑*")
        )
    await state.update_data(button_url=message.text)
    data = await state.get_data()
    await message.bot.copy_message(
        chat_id=message.from_user.id,
        from_chat_id=data.get("chat_id"),
        message_id=data.get("message_id"),
        reply_markup=(
            InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            url=data.get("button_url"),
                            text=data.get("button_text"),
                        )
                    ]
                ]
            )
            if data.get("add_button")
            else None
        ),
    )
    await state.set_state(MailingStates.confirm)
    await message.answer(
        text=_("*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.*"),
        reply_markup=confirm_mailing_keyboard(),
    )
