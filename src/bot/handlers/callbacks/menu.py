import os

from aiogram import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.i18n import gettext as _

from database.models import User, Feedback, Game
from keyboards.inline import (
    languages_keyboard,
    buy_me_a_coffee_keyboard,
    menu_keyboard,
    back_to_menu_keyboard,
    admin_menu_keyboard,
    back_to_admin_menu_keyboard,
    cancel_keyboard,
    location_options_keyboard, statistics_keyboard,
)
from keyboards.reply import request_contact_keyboard
from utils.messages import (
    language_by_locale,
    rules_message,
    get_feedback_message,
    get_stats,
    stats_message, escape_markdown_v2,
)
from utils.states import (
    LanguageStates,
    AdminStates,
    MailingStates,
    FeedbackStates,
    LocationStates,
)

router = Router()


@router.callback_query(lambda call: call.data.startswith("menu_option="))
async def callback_menu(call: CallbackQuery, db_user: User, state: FSMContext):
    try:
        arg = call.data.split("=")[1]
    except (IndexError, ValueError):
        return
    if arg == "language":
        await state.set_state(LanguageStates.user_locale)
        await call.message.edit_text(
            text=_("*–°–µ–π—á–∞—Å –≤–∞—à —è–∑—ã–∫: {language}\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ *").format(
                language=language_by_locale(db_user.locale)
            ),
            reply_markup=languages_keyboard(),
        )
    elif arg == "rules":
        await call.message.edit_text(
            text=rules_message(), reply_markup=back_to_menu_keyboard()
        )
    elif arg == "coffee":
        await call.message.delete()
        pic_file_path = os.path.join("static", "img", "coffee.png")
        await call.message.answer_photo(
            photo=FSInputFile(path=pic_file_path),
            caption=_(
                "–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–µ–∂–∏—Ç –Ω–∞ –ø–ª–µ—á–∞—Ö –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\\, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ö–æ—Å—Ç–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ —É–¥–µ–ª—è–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª\\-–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\. –¢–∞–∫ —á—Ç–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ —É–≥–æ—Å—Ç–∏–≤ —á–∞—à–µ—á–∫–æ–π –∫–æ—Ñ–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –ª–∏–±–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ QR\\-–∫–æ–¥ :\\)"
            ),
            reply_markup=buy_me_a_coffee_keyboard(),
        )
    elif arg == "feedback":
        await state.set_state(FeedbackStates.feedback)
        await call.message.edit_text(
            text=_(
                "*–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∏–∂–µ\\. üëá*\n_–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞–∂–¥—ã–π –≤–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –µ–≥–æ\\._"
            ),
            reply_markup=cancel_keyboard(),
        )
    elif arg == "admin_menu":
        if not db_user.is_admin:
            return await call.answer(
                _("–î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"),
                show_alert=True,
            )
        await call.message.edit_text(
            _("*–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\\! üíÖ*"), reply_markup=admin_menu_keyboard()
        )


@router.callback_query(lambda call: call.data.startswith("admin_menu_option="))
async def callback_admin_menu_option(
    call: CallbackQuery, state: FSMContext, db_user: User
):
    if not db_user or not db_user.is_admin:
        return await call.answer(
            _("–î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"),
            show_alert=True,
        )
    try:
        arg = call.data.split("=")[1]
    except IndexError:
        return
    if arg == "get_feedback":
        feedbacks = await Feedback.get_last()
        await call.message.edit_text(
            text=get_feedback_message(feedbacks=feedbacks),
            reply_markup=back_to_admin_menu_keyboard(),
        )
    elif arg == "error":
        return 1 / 0
    elif arg == "admin":
        await state.set_state(AdminStates.message_user)
        await call.message.delete()
        await call.message.answer(
            text=_(
                "*–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞\\! üë®‚Äçüíª*\n_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\\, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üëá_"
            ),
            reply_markup=request_contact_keyboard(),
        )
    elif arg == "stats":
        stats = await get_stats()
        _stats_message = stats_message(stats=stats)
        try:
            await call.message.edit_text(
                text=_stats_message,
                reply_markup=statistics_keyboard(),
            )
        except TelegramBadRequest:
            return
    elif arg == "mailing":
        await state.set_state(MailingStates.message)
        await call.message.edit_text(
            text=_(
                "*–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\\!*\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å\\."
            ),
            reply_markup=back_to_admin_menu_keyboard(),
        )
    elif arg == "location":
        await state.set_state(LocationStates.option)
        await call.message.edit_text(
            text=_("*–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*"),
            reply_markup=location_options_keyboard(),
        )


@router.callback_query(lambda call: call.data == "cancel")
async def callback_cancel(
    call: CallbackQuery, state: FSMContext, db_user: User
):
    await state.clear()
    bot = await call.bot.get_me()
    try:
        await call.message.edit_text(
            text=_("*–ü—Ä–∏–≤–µ—Ç\\!* üëã\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –≥–¥–µ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å\\!"),
            reply_markup=menu_keyboard(
                bot.username, for_admins=db_user.is_admin
            ),
        )
    except TelegramBadRequest:
        await call.message.delete()
        await call.message.answer(
            text=_("*–ü—Ä–∏–≤–µ—Ç\\!* üëã\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –≥–¥–µ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å\\!"),
            reply_markup=menu_keyboard(
                bot.username, for_admins=db_user.is_admin
            ),
        )


@router.callback_query(lambda call: call.data == "cancel_admin")
async def callback_cancel_admin(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text(
            text=_("*–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\\! üíÖ*"),
            reply_markup=admin_menu_keyboard(),
        )
    except TelegramBadRequest:
        await call.message.delete()
        await call.message.answer(
            text=_("*–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\\! üíÖ*"),
            reply_markup=admin_menu_keyboard(),
        )
